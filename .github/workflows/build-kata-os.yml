name: Build Kata OS
run-name: Build Kata OS
on: [push]
jobs:
  build:
    strategy:
      matrix:
        runner: [ubuntu-latest-dd, arm-8core-linux]
        include:
          - runner: ubuntu-latest-dd
            arch: amd64
            kernel_version: 6.8
          - runner: arm-8core-linux
            arch: arm64
            kernel_version: 6.8
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.24.0"
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libelf-dev flex bison
      - name: Build Ubuntu image ${{ matrix.arch }}
        run: cd tools/osbuilder && sudo make USE_DOCKER=true OS_VERSION=jammy image-ubuntu
      - name: Build Kernel ${{ matrix.kernel_version }}
        run: |
          cd tools/packaging/kernel
          sudo ./build-kernel.sh -v ${{ matrix.kernel_version }} setup
          sudo ./build-kernel.sh -v ${{ matrix.kernel_version }} build
      - name: Build containerd-shim-kata-v2
        run: |
          cd src/runtime
          make -j$(nproc) containerd-shim-v2
      - name: Bundle artifacts
        run: |
          cp tools/packaging/kernel/kata-linux-*/vmlinux /tmp/vmlinux
          cp tools/osbuilder/kata-containers-image-ubuntu.img /tmp/kata-containers-image-ubuntu.img
          cp sbom.cdx.gz /tmp/sbom.cdx.gz
          cp src/runtime/containerd-shim-kata-v2 /tmp/containerd-shim-kata-v2
          mkdir -p /tmp/artifacts
          zip -j /tmp/artifacts/artifacts-${{ matrix.arch }}.zip /tmp/vmlinux /tmp/kata-containers-image-ubuntu.img /tmp/sbom.cdx.gz /tmp/containerd-shim-kata-v2
          cd /tmp/artifacts
          sha256sum artifacts-${{ matrix.arch }}.zip > checksum-${{ matrix.arch }}.sha256
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.arch }}
          path: /tmp/artifacts
          retention-days: 1
  build-asset:
    runs-on: ubuntu-latest-dd
    strategy:
      matrix:
        asset:
          - agent
          - agent-ctl
          - cloud-hypervisor
          - csi-kata-directvolume
          - firecracker
          - genpolicy
          - kata-ctl
          - kata-manager
          - kernel
          - kernel-confidential
          - kernel-dragonball-experimental
          - nydus
          - ovmf
          - ovmf-sev
          - qemu
          - qemu-snp-experimental
          - qemu-tdx-experimental
          - stratovirt
          - trace-forwarder
          - virtiofsd
    steps:
      - uses: actions/checkout@v4
      - name: Build ${{ matrix.asset }}
        id: build
        run: |
          make "${KATA_ASSET}-tarball"
          build_dir=$(readlink -f build)
          # store-artifact does not work with symlink
          mkdir -p kata-build && cp "${build_dir}"/kata-static-"${KATA_ASSET}"*.tar.* kata-build/.
        env:
          KATA_ASSET: ${{ matrix.asset }}
          TAR_OUTPUT: ${{ matrix.asset }}.tar.gz
          ARTEFACT_REGISTRY: ghcr.io
          ARTEFACT_REGISTRY_USERNAME: ${{ github.actor }}
          ARTEFACT_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: yes

      - name: store-artifact ${{ matrix.asset }}
        uses: actions/upload-artifact@v4
        with:
          name: kata-artifacts-amd64-${{ matrix.asset }}
          path: kata-build/kata-static-${{ matrix.asset }}.tar.xz
          retention-days: 15
          if-no-files-found: error

  build-asset-rootfs:
    runs-on: ubuntu-latest-dd
    needs: build-asset
    strategy:
      matrix:
        asset:
          - rootfs-image
          - rootfs-initrd
    steps:
      - uses: actions/checkout@v4
      - name: get-artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: kata-artifacts-amd64-*
          path: kata-artifacts
          merge-multiple: true

      - name: Build ${{ matrix.asset }}
        id: build
        run: |
          ./tests/gha-adjust-to-use-prebuilt-components.sh kata-artifacts "${KATA_ASSET}"
          make "${KATA_ASSET}-tarball"
          build_dir=$(readlink -f build)
          # store-artifact does not work with symlink
          mkdir -p kata-build && cp "${build_dir}"/kata-static-"${KATA_ASSET}"*.tar.* kata-build/.
        env:
          KATA_ASSET: ${{ matrix.asset }}
          TAR_OUTPUT: ${{ matrix.asset }}.tar.gz
          ARTEFACT_REGISTRY: ghcr.io
          ARTEFACT_REGISTRY_USERNAME: ${{ github.actor }}
          ARTEFACT_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: yes

      - name: store-artifact ${{ matrix.asset }}
        uses: actions/upload-artifact@v4
        with:
          name: kata-artifacts-amd64-${{ matrix.asset }}
          path: kata-build/kata-static-${{ matrix.asset }}.tar.xz
          retention-days: 15
          if-no-files-found: error
  build-asset-shim-v2:
    runs-on: ubuntu-22.04
    needs: [build-asset, build-asset-rootfs]
    steps:
      - uses: actions/checkout@v4
      - name: get-artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: kata-artifacts-amd64-*
          path: kata-artifacts
          merge-multiple: true

      - name: Build shim-v2
        id: build
        run: |
          ./tests/gha-adjust-to-use-prebuilt-components.sh kata-artifacts "${KATA_ASSET}"
          make "${KATA_ASSET}-tarball"
          build_dir=$(readlink -f build)
          # store-artifact does not work with symlink
          mkdir -p kata-build && cp "${build_dir}"/kata-static-"${KATA_ASSET}"*.tar.* kata-build/.
        env:
          KATA_ASSET: shim-v2
          TAR_OUTPUT: shim-v2.tar.gz
          ARTEFACT_REGISTRY: ghcr.io
          ARTEFACT_REGISTRY_USERNAME: ${{ github.actor }}
          ARTEFACT_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          RELEASE: yes
          MEASURED_ROOTFS: yes

      - name: store-artifact shim-v2
        uses: actions/upload-artifact@v4
        with:
          name: kata-artifacts-amd64-shim-v2
          path: kata-build/kata-static-shim-v2.tar.xz
          retention-days: 15
          if-no-files-found: error

  create-kata-tarball:
    runs-on: ubuntu-latest-dd
    needs: [build-asset, build-asset-rootfs, build-asset-shim-v2]
    steps:
      - uses: actions/checkout@v4
      - name: get-artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: kata-artifacts-amd64-*
          path: kata-artifacts
          merge-multiple: true
      - name: merge-artifacts
        run: |
          ./tools/packaging/kata-deploy/local-build/kata-deploy-merge-builds.sh kata-artifacts versions.yaml
      - name: store-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kata-static-tarball-amd64
          path: kata-static.tar.xz
          retention-days: 15
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest-dd
    needs: [build, create-kata-tarball]
    # Only create a release when a new tag is created
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download artifacts amd64
        uses: actions/download-artifact@v4
        with:
          name: artifacts-amd64
      - name: Download artifacts arm64
        uses: actions/download-artifact@v4
        with:
          name: artifacts-arm64
      - name: Download kata-static-tarball-amd64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: kata-static-tarball-amd64
      - name: "Create New Release"
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          RELEASE_VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          echo "Creating release $RELEASE_VERSION"
          gh release create ${RELEASE_VERSION} -t ${RELEASE_VERSION} --draft
          gh release upload "${RELEASE_VERSION}" artifacts-amd64.zip
          gh release upload "${RELEASE_VERSION}" artifacts-arm64.zip
          gh release upload "${RELEASE_VERSION}" checksum-amd64.sha256
          gh release upload "${RELEASE_VERSION}" checksum-arm64.sha256
          gh release upload "${RELEASE_VERSION}" kata-static.tar.xz
          gh release edit ${RELEASE_VERSION} --verify-tag	--draft=false
